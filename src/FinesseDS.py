#     "$Name:  $";
#     "$Header:  $";
#=============================================================================
#
# file :        FinesseDS.py
#
# description : Python source for the FinesseDS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                FinesseDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import Finesse_control as fc
import threading
import Queue
import time
import numpy as np

class FinesseCommand:
    def __init__(self, command, data=None):
        self.command = command
        self.data = data

class LaserData():
    def __init__(self):
            self.current = [None]
            self.power = [None]
            self.status = [None]
            self.shutter = [None]
            self.interlock = [None]
            self.laserTemperature = [None]
            self.psuTemperature = [None]    
            self.psuTime = [None]
            self.laserEnabledTime = [None]
            self.laserThresholdTime = [None]
            self.firmwareVersion = [None]
            self.serial = [None]

#==================================================================
#   FinesseDS Class Description:
#
#         Controls a Laser Quantum Finesse DPSS laser.
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :       Connected to laser. Laser power on, shutter open.
#   DevState.OFF :      Connected to laser, laser power off, shutter closed
#   DevState.STANDBY :  The laser is on, the shutter is closed.
#   DevState.FAULT :    An error was detected. Probably communication.
#   DevState.DISABLE :  The laser is disabled due to interlock condition.
#   DevState.ALARM :    The device is in an ALARM state due to an attribute being out of limits.
#   DevState.UNKNOWN :  Disconnected from laser power supply
#==================================================================


class FinesseDS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#     Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        FinesseDS.init_device(self)

#------------------------------------------------------------------
#     Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        with self.streamLock:
            self.info_stream(''.join(("[Device delete_device method] for device", self.get_name())))
        self.stopThread()


#------------------------------------------------------------------
#     Device initialization
#------------------------------------------------------------------
    def init_device(self):

        # Try stopping the stateThread if it was started before. Will fail if this
        # is the initial start.
        try:
            self.stopThread()
        except Exception, e:
            pass

        self.streamLock = threading.Lock()
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::init_device()")))
        self.set_state(PyTango.DevState.UNKNOWN)
        self.get_device_properties(self.get_device_class())

        
        self.attrLock = threading.Lock()
        self.stateThread = threading.Thread()
        threading.Thread.__init__(self.stateThread, target=self.stateHandlerDispatcher)

        self.commandQueue = Queue.Queue(100)
        self.laserData = LaserData()

        self.stateHandlerDict = {PyTango.DevState.ON: self.onHandler,
                                PyTango.DevState.MOVING: self.onHandler,
                                PyTango.DevState.ALARM: self.onHandler,
                                PyTango.DevState.STANDBY: self.onHandler,
                                PyTango.DevState.DISABLE: self.onHandler,
                                PyTango.DevState.FAULT: self.faultHandler,
                                PyTango.DevState.INIT: self.initHandler,
                                PyTango.DevState.UNKNOWN: self.unknownHandler,
                                PyTango.DevState.OFF: self.onHandler}

        self.stopStateThreadFlag = False

        self.stateThread.start()

    
    def stateHandlerDispatcher(self):
        """Handles switch of states in the state machine thread.
        Each state handled method should exit by setting the next state,
        going back to this method. The previous state is also included when
        calling the next state handler method.
        The thread is stopped by setting the stopStateThreadFlag.
        """
        prevState = self.get_state()
        while self.stopStateThreadFlag == False:
            try:
                self.stateHandlerDict[self.get_state()](prevState)
                prevState = self.get_state()
            except KeyError:
                self.stateHandlerDict[PyTango.DevState.UNKNOWN](prevState)
                prevState = self.get_state()

    def stopThread(self):
        """Stops the state handler thread by setting the stopStateThreadFlag
        """
        self.stopStateThreadFlag = True
        self.stateThread.join(3)
        try:
            self.device.close()
        except Exception:
            pass


    def unknownHandler(self, prevState):
        """Handles the UNKNOWN state, before communication with the hardware devices
        has been established. 
        """
        with self.streamLock:
            self.info_stream('Entering unknownHandler')
        connectionTimeout = 1.0
        self.set_status('Connecting to frequency counter, labjack, and picomotor')

        while self.stopStateThreadFlag == False:
            try:
                self.device.close()
            except Exception:
                pass
            try:
                self.device = fc.Finesse_control(self.Port)
                self.device.connect(self.Port)
            except Exception, e:
                self.error_stream(''.join(('Error creating finesse object: ', str(e))))
                self.device = None
                time.sleep(connectionTimeout)
                continue

            self.set_state(PyTango.DevState.INIT)
            break

    def initHandler(self, prevState):
        """Handles the INIT state. Query Halcyon device to see if it is alive.
        """
        with self.streamLock:
            self.info_stream('Entering initHandler')
        waitTime = 1.0
        self.set_status('Initializing devices')
        retries = 0
        maxTries = 5

        while self.stopStateThreadFlag == False:
            retries += 1
            if retries > maxTries:
                self.set_state(PyTango.DevState.UNKNOWN)
                break
            try:
                with self.streamLock:
                    self.info_stream('Trying to connect...')     
                # Initial read of all parameters               
                self.laserData.current = self.device.getCurrent()
                self.laserData.power = self.device.getPower()
                self.laserData.laserTemperature = self.device.getLaserTemperature()
                try:
                    self.laserData.interlock = self.device.getInterlock()
                except NotImplementedError:
                    self.laserData.interlock = None
                self.laserData.status = self.device.getShutter()
                self.laserData.shutter = self.device.getShutter()
                self.laserData.firmwareVersion = self.device.getSoftwareVersion()
                self.laserData.serial = self.device.getSerial()

            except Exception, e:
                with self.streamLock:
                    self.error_stream(''.join(('Error when initializing device')))
                    self.error_stream(str(e))
                self.checkCommands(blockTime=waitTime)
                continue

            self.set_state(PyTango.DevState.ON)
            break

    def onHandler(self, prevState):
        """Handles the ON state. Connected to the Finesse COM port.
        Waits in a loop checking commands.
        """
        with self.streamLock:
            self.info_stream('Entering onHandler')
        handledStates = [PyTango.DevState.ON, PyTango.DevState.ALARM, PyTango.DevState.MOVING, PyTango.DevState.DISABLE, PyTango.DevState.STANDBY, PyTango.DevState.OFF]
        
        # We will cycle through these commands, populating the laserData structure.
        # The device is rather slow, so only one command at a time before checking 
        # if something has happened
        commandList = ['readCurrent', 'readPower', 'readLaserTemperature',
            'readShutter', 'readStatus', 'readLaserTimers']        
        nextCommand = 0
        waitTime = 0.1
        self.set_status('On')

        while self.stopStateThreadFlag == False:
#            self.info_stream('onhandler loop')
            with self.attrLock:
                state = self.get_state()
            if state not in handledStates:
                break
            # Read laser parameters
            with self.attrLock:
                if self.commandQueue.empty() == True:
                    try:
                        cmdMsg = FinesseCommand(commandList[nextCommand])
                        self.info_stream(''.join(('Issuing command ', commandList[nextCommand])))
                        nextCommand = (nextCommand + 1) % commandList.__len__()                        
                        self.commandQueue.put(cmdMsg)
                    except Exception, e:
                        with self.streamLock:
                            self.error_stream(''.join(('Error reading finesse: ', str(e))))
                            self.set_state(PyTango.DevState.FAULT)
                            break                
                        
            self.checkCommands(blockTime=waitTime)
            self.adjust_State()
            
            
    def faultHandler(self, prevState):
        """Handles the FAULT state. A problem has been detected.
        """
        with self.streamLock:
            self.info_stream('Entering faultHandler')
        handledStates = [PyTango.DevState.FAULT]
        waitTime = 0.1
        retries = 0
        maxTries = 5

        faultProcessFlag = True
        s = ''.join(('Fault condition. Processing...\n'))
        t0 = time.time()
        
        while self.stopStateThreadFlag == False:
            if self.get_state() not in handledStates:
                break
            try:
                self.device.close()
                faultProcessFlag = False
            except Exception, e:
                with self.streamLock:
                    self.error_stream(''.join(('Close...', str(e))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join((s, 'Error closing connection')))
                faultProcessFlag = True
            if faultProcessFlag == False:
                try:
                    self.device.connect(self.Port)
                    faultProcessFlag = False
                except Exception, e:
                    with self.streamLock:
                        self.error_stream(''.join(('Connect...', str(e))))
                    self.set_state(PyTango.DevState.UNKNOWN)
                    self.set_status(''.join((s, 'Error connecting')))
                    faultProcessFlag = True
            if faultProcessFlag == False:
                try:
                    stat = self.device.getPower()
                    faultProcessFlag = False
                except Exception, e:
                    with self.streamLock:
                        self.error_stream(''.join(( 'Communicate...', str(e))))
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status(''.join((s, 'Error receiving response')))
                    faultProcessFlag = True
            if time.time() - t0 > 10:
                faultProcessFlag = False
            retries += 1
            if retries > maxTries:
                self.set_state(PyTango.DevState.UNKNOWN)

    def checkCommands(self, blockTime=0):
        """Checks the commandQueue for new commands. Must be called regularly.
        If the queue is empty the method exits immediately.
        """
#         with self.streamLock:
#             self.debug_stream('Entering checkCommands')
        try:
            if blockTime == 0:
#                 with self.streamLock:
#                     self.debug_stream('checkCommands: blockTime == 0')
                cmd = self.commandQueue.get(block=False)
            else:
#                 with self.streamLock:
#                     self.debug_stream('checkCommands: blockTime != 0')
                cmd = self.commandQueue.get(block=True, timeout=blockTime)
#             with self.streamLock:
#                 self.info_stream(str(cmd.command))
            if cmd.command == 'writePower':
                newPower = cmd.data
                with self.streamLock:
                    self.info_stream(''.join(('Write power ', str(newPower))))
                with self.attrLock:
                    self.device.setPower(newPower)
            elif cmd.command == 'readPower':
                with self.streamLock:
                    self.info_stream(''.join(('Read power ')))
                with self.attrLock:
                    power = self.device.getPower()
                    self.laserData.power = power
            elif cmd.command == 'readCurrent':
                with self.streamLock:
                    self.info_stream(''.join(('Read current')))
                with self.attrLock:
                    data = self.device.getCurrent()
                    self.laserData.current = data
            elif cmd.command == 'readLaserTemperature':
                with self.streamLock:
                    self.info_stream(''.join(('Read LaserTemperature')))
                with self.attrLock:
                    data = self.device.getLaserTemperature()
                    self.laserData.laserTemperature = data
                # Safety check of the temperature:
                mulAttr = self.get_device_attr()
                tempAttr = mulAttr.get_attr_by_name('lasertemperature')
#                attrConf = self.get_attribute_config('lasertemperature')
#                if data[0] < np.double(attrConf.min_alarm) or data[0] > np.double(attrConf.max_alarm):
                if tempAttr.is_max_alarm() == True:
                    if self.laserData.status[0] == True:
                        # Shut down laser if it is on
                        newCmd = FinesseCommand('stop')
                        self.commandQueue.put(newCmd)
                
            elif cmd.command == 'readShutter':
                with self.streamLock:
                    self.info_stream(''.join(('Read Shutter')))
                with self.attrLock:
                    data = self.device.getShutter()
                    self.laserData.shutter = data
            elif cmd.command == 'readStatus':
                with self.streamLock:
                    self.info_stream(''.join(('Read Status')))
                with self.attrLock:
                    data = self.device.getStatus()
                    self.laserData.status = data
                    try:
                        data = self.device.getInterlock()
                        self.laserData.interlock = data
                    except NotImplementedError:
                        self.laserData.interlock = None
            elif cmd.command == 'readLaserTimers':
                with self.streamLock:
                    self.info_stream(''.join(('Read LaserTimers')))
                with self.attrLock:
                    data = self.device.getLaserTimers()
                    self.laserData.psuTime = data[0]
                    self.laserData.laserEnabledTime = data[1]
                    self.laserData.laserThresholdTime = data[2]
                    self.info_stream(str(self.laserData.laserThresholdTime))
                    

            elif cmd.command == 'stop' or cmd.command == 'standby':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    with self.attrLock:
                        self.device.turnLaserOff()

            elif cmd.command == 'close':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    with self.attrLock:
                        self.device.closeShutter()

            elif cmd.command == 'start':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    with self.attrLock:
                        self.device.turnLaserOn()()

            elif cmd.command == 'open':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    with self.attrLock:
                        self.device.openShutter()

            elif cmd.command == 'off':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    self.set_state(PyTango.DevState.OFF)

            elif cmd.command == 'close':
                if self.get_state() not in [PyTango.DevState.INIT, PyTango.DevState.UNKNOWN]:
                    self.device.closeShutter()

            elif cmd.command == 'init':
                if self.get_state() not in [PyTango.DevState.UNKNOWN]:
                    self.set_state(PyTango.DevState.UNKNOWN)
                    
            elif cmd.command == 'on':
                if self.get_state() not in [PyTango.DevState.UNKNOWN]:
                    self.set_state(PyTango.DevState.ON)
                    

        except Queue.Empty:
            with self.streamLock:
                self.debug_stream('checkCommands: queue empty')
                
        except Exception, e:
            with self.streamLock:
                self.error_stream(''.join(('Error in checkCommands: ', str(e))))
                self.set_state(PyTango.DevState.UNKNOWN)

    def adjust_State(self):
        '''
        Updates the state based on the information in the laserData variable.
        '''
        
#         if self.get_state() != PyTango.DevState.ALARM:
#             # Do not change state if we are in ALARM
        if self.laserData.interlock == None:
            if self.laserData.status != None and self.laserData.shutter != None:
                if self.laserData.status[0] == True and self.laserData.shutter[0] == False:
                    self.set_state(PyTango.DevState.STANDBY)
                    self.set_status('Laser on, shutter closed')
                elif self.laserData.status[0] == True and self.laserData.shutter[0] == True:
                    self.set_state(PyTango.DevState.ON)
                    self.set_status('Laser on, shutter open')
                elif self.laserData.status[0] == False:
                    self.set_state(PyTango.DevState.OFF)
                    self.set_status('Laser off')
                else:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('State data not initialized')
                
        else:
            if self.laserData.status != None and self.laserData.shutter != None:
                if self.laserData.interlock[0] == False:
                    self.set_state(PyTango.DevState.DISABLE)
                    self.set_status('Interlock tripped')
                elif self.laserData.status[0] == True and self.laserData.shutter[0] == False:
                    self.set_state(PyTango.DevState.STANDBY)
                    self.set_status('Laser on, shutter closed')
                elif self.laserData.status[0] == True and self.laserData.shutter[0] == True:
                    self.set_state(PyTango.DevState.ON)
                    self.set_status('Laser on, shutter open')
                elif self.laserData.status[0] == False:
                    self.set_state(PyTango.DevState.OFF)
                    self.set_status('Laser off')
                else:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('State data not initialized')
                    
#------------------------------------------------------------------
#     Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        
#         print "In ", self.get_name(), "::always_excuted_hook()"
        pass



#------------------------------------------------------------------
#     Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
#         print "In ", self.get_name(), "::read_attr_hardware()"
        pass

#==================================================================
#
#     FinesseDS read/write attribute methods
#
#==================================================================




#------------------------------------------------------------------
#     Read Current attribute
#------------------------------------------------------------------
    def read_Current(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_Current()")))
        with self.attrLock:
            attr_read = self.laserData.current[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)




#---- Current attribute State Machine -----------------
    def is_Current_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read Power attribute
#------------------------------------------------------------------
    def read_Power(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_Power()")))
        with self.attrLock:
            attr_read = self.laserData.power[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)


#------------------------------------------------------------------
#     Write Power attribute
#------------------------------------------------------------------
    def write_Power(self, attr):
        with self.streamLock:
            msg = ''.join(("In ", self.get_name(), "::write_Power()"))
            self.info_stream(msg)
        
        data = attr.get_write_value()
        
        with self.streamLock:
            msg = ''.join(( "Attribute value = ", str(data)))
            self.info_stream(msg)

        #     Add your own code here
        cmdMsg = FinesseCommand('writePower', data)
        self.commandQueue.put(cmdMsg)


#---- Power attribute State Machine -----------------
    def is_Power_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read LaserTemperature attribute
#------------------------------------------------------------------
    def read_LaserTemperature(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_LaserTemperature()")))
        with self.attrLock:
            attr_read = self.laserData.laserTemperature[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)
        


#---- LaserTemperature attribute State Machine -----------------
    def is_LaserTemperature_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read PowerSupplyTemperature attribute
#------------------------------------------------------------------
    def read_PowerSupplyTemperature(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_PowerSupplyTemperature()")))
        with self.attrLock:
            attr_read = self.laserData.psuTemperature[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)


#---- PowerSupplyTemperature attribute State Machine -----------------
    def is_PowerSupplyTemperature_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#     Read ShutterState attribute
#------------------------------------------------------------------
    def read_ShutterState(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_ShutterState()")))
        with self.attrLock:
            attr_read = self.laserData.shutter[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 'unknown'
            else:
                if attr_read == True:
                    attr_read = 'open'
                else:
                    attr_read = 'closed'
            attr.set_value(attr_read)
        

#---- PowerSupplyTemperature attribute State Machine -----------------
    def is_ShutterState_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#     Read LaserOperationState attribute
#------------------------------------------------------------------
    def read_LaserOperationState(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_LaserOperationState()")))
        with self.attrLock:
            attr_read = self.laserData.status[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 'unknown'
            else:
                if attr_read == True:
                    attr_read = 'running'
                else:
                    attr_read = 'stopped'
            attr.set_value(attr_read)
            


#---- PowerSupplyTemperature attribute State Machine -----------------
    def is_LaserOperationState_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read PSUTime attribute
#------------------------------------------------------------------
    def read_PSUTime(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_PSUTime()")))
        with self.attrLock:
            attr_read = self.laserData.psuTime[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)


#---- PSUTime attribute State Machine -----------------
    def is_PSUTime_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read LaserEnabledTime attribute
#------------------------------------------------------------------
    def read_LaserEnabledTime(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_LaserEnabledTime()")))
        with self.attrLock:
            attr_read = self.laserData.laserEnabledTime[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)

#---- LaserEnabledTime attribute State Machine -----------------
    def is_LaserEnabledTime_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read LaserThresholdTime attribute
#------------------------------------------------------------------
    def read_LaserThresholdTime(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_LaserThresholdTime()")))
        with self.attrLock:
            attr_read = self.laserData.laserThresholdTime[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
            attr.set_value(attr_read)


#---- LaserThresholdTime attribute State Machine -----------------
    def is_LaserThresholdTime_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Read FirmwareVersion attribute
#------------------------------------------------------------------
    def read_FirmwareVersion(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_FirmwareVersion()")))
        with self.attrLock:
            attr_read = self.laserData.firmwareVersion[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 'unknown'
                
            attr.set_value(attr_read)

#---- PowerSupplyTemperature attribute State Machine -----------------
    def is_FirmwareVersion_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#     Read Serial attribute
#------------------------------------------------------------------
    def read_Serial(self, attr):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::read_Serial()")))
        with self.attrLock:
            attr_read = self.laserData.serial[0]
            if attr_read == None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
                attr_read = 0.0
                
            attr.set_value(attr_read)

#---- PowerSupplyTemperature attribute State Machine -----------------
    def is_Serial_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#==================================================================
#
#     FinesseDS command methods
#
#==================================================================

#------------------------------------------------------------------
#     On command:
#
#     Description: 
#------------------------------------------------------------------
    def On(self):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::On()")))
        cmdMsg = FinesseCommand('start')
        self.commandQueue.put(cmdMsg)
        cmdMsg = FinesseCommand('open')
        self.commandQueue.put(cmdMsg)


#---- On command State Machine -----------------
    def is_On_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Off command:
#
#     Description: 
#------------------------------------------------------------------
    def Off(self):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::Off()")))
        cmdMsg = FinesseCommand('stop')
        self.commandQueue.put(cmdMsg)
        cmdMsg = FinesseCommand('close')
        self.commandQueue.put(cmdMsg)


#---- Off command State Machine -----------------
    def is_Off_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Open command:
#
#     Description: 
#------------------------------------------------------------------
    def Open(self):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::Open()")))
        cmdMsg = FinesseCommand('open')
        self.commandQueue.put(cmdMsg)


#---- Open command State Machine -----------------
    def is_Open_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Close command:
#
#     Description: 
#------------------------------------------------------------------
    def Close(self):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::Close()")))
        cmdMsg = FinesseCommand('close')
        self.commandQueue.put(cmdMsg)


#---- Close command State Machine -----------------
    def is_Close_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#     Start command:
#
#     Description: 
#------------------------------------------------------------------
    def Start(self):
        with self.streamLock:
            self.info_stream(''.join(("In ", self.get_name(), "::Start()")))
        cmdMsg = FinesseCommand('start')
        self.commandQueue.put(cmdMsg)


#---- Start command State Machine -----------------
    def is_Start_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#     FinesseDSClass class definition
#
#==================================================================
class FinesseDSClass(PyTango.DeviceClass):

    #     Class Properties
    class_property_list = {
        }


    #     Device Properties
    device_property_list = {
        'Port':
            [PyTango.DevString,
            "Serial port that the laser is connected to.",
            [ "COM0" ] ],
        }


    #     Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Off':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Open':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Close':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        }


    #     Attribute definitions
    attr_list = {
        'Current':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"current",
                'unit':"%",
                'display unit':"%",
                'max value':100,
                'min value':0,
                'description':"Current through the pump diodes as percentage of maximum.",
                'Polling period':500,
            } ],
        'Power':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"power",
                'unit':"W",
                'display unit':"W",
                'max value':10,
                'min value':0,
                'description':"Laser power level in W.",
                'Memorized':"true_without_hard_applied",
                'Polling period':500,
            } ],
        'LaserTemperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"degC",
                'display unit':"degC",
                'max alarm':27,
                'min alarm':15,
                'max warning':24,
                'min warning':23,
                'description':"Temperature of the laser head.",
                'Polling period':500,
            } ],
        'PowerSupplyTemperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period':2000,
            } ],
        'ShutterState':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"State of laser shutter, open or closed",
            } ],                 
        'LaserOperationState':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Running state of laser, running or stopped",
            } ],                 
        'PSUTime':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"min",
                'Polling period':60000,
            } ],
        'LaserEnabledTime':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"min",
                'Polling period':60000,
            } ],
        'LaserThresholdTime':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period':60000,
            } ],
        'Serial':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Serial number of the Finesse",
            } ],                 
        'FirmwareVersion':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Firmware version of the Finesse",
            } ],                 
        }


#------------------------------------------------------------------
#     FinesseDSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In FinesseDSClass  constructor"

#==================================================================
#
#     FinesseDS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(FinesseDSClass, FinesseDS, 'FinesseDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed, e:
        print '-------> Received a DevFailed exception:', e
    except Exception, e:
        print '-------> An unforeseen exception occured....', e
